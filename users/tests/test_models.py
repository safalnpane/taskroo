import pytest
from mixer.backend.django import mixer
from django.contrib.auth import get_user_model

pytestmark = pytest.mark.django_db


class TestCustomUser:
    def test_str_returns_username(self):
        new_user = mixer.blend(get_user_model(), username="safal")
        assert new_user.username == "safal", "Should return username"  # type: ignore


class TestOTP:
    def test_str_returns_username(self):
        safal = mixer.blend(get_user_model(), username="safal")
        registration_otp = mixer.blend("users.OTP", user=safal)
        assert str(registration_otp) == safal.username, "Should return username"  # type: ignore

    def test_autogenerate_code(self):
        safal = mixer.blend(get_user_model(), username="safal")
        registration_otp = mixer.blend("users.OTP", user=safal)
        assert (
            registration_otp.code is not None  # type: ignore
        ), "Verification code should be generated by default"
        assert (
            len(registration_otp.code) == 6  # type: ignore
        ), "Verification code length should be 6 chars"
